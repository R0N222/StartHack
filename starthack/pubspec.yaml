import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:starthack/Stock/Chart.dart';
import 'package:starthack/shared/AI.dart';
import 'package:starthack/shared/Data.dart';

class BigLineChart extends StatelessWidget {
  final List<Color> gradientColors = [
    const Color(0xff23b6e6),
    const Color(0xff02d39a),
  ];

  @override
  Widget build(BuildContext context) => LineChart(
        LineChartData(
            minX: 0,
            maxX: 11,
            minY: 0,
            maxY: 6,
            borderData: FlBorderData(show: false),
            titlesData: FlTitlesData(rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)), topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false))),
            lineBarsData: [
              LineChartBarData(spots: [
                FlSpot(0, 3),
                FlSpot(2.6, 2),
                FlSpot(4.9, 5),
                FlSpot(6.8, 2.5),
                FlSpot(8, 4),
                FlSpot(9.5, 3),
                FlSpot(11, 4),
              ], isCurved: true, gradient: LinearGradient(colors: gradientColors), barWidth: 5, dotData: FlDotData(show: false)),
            ],
            gridData: FlGridData(drawHorizontalLine: false, drawVerticalLine: false)),
      );
}

class StockScreenWidget extends StatelessWidget {
  final String name;
  const StockScreenWidget({super.key, required this.name});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(children: [
        new Container(
          color: Colors.white,
        ),
        ListView.builder(
          itemBuilder: (context, index) {
            switch (index) {
              case 0:
                // Chart here
                return Container(
                  height: 300,
                );
              case 1:
                // Summary here
                return SummaryWidget(name: name);
              default:
                return Container(
                  height: 300,
                );
            }
          },
        ),
      ]),
    ); //LineChartWidget()
  }
}

class SummaryWidget extends StatefulWidget {
  final String name;

  const SummaryWidget({super.key, required this.name});

  @override
  State<SummaryWidget> createState() => _SummaryWidgetState();
}

class _SummaryWidgetState extends State<SummaryWidget> {
  bool isExpanded = false;
  String currentPrompt = "";
  List<String> conversation = [];
  var msgController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Container(
      child: Center(
        child: Column(
          children: [
            Container(
              child: Image.asset("assets/images/AI_Icon.png"),
              alignment: Alignment.centerLeft,
              height: 40,
              margin: EdgeInsets.fromLTRB(0, 20, 0, 0),
            ),
            FutureBuilder(
              future: summarize(widget.name),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Column(
                    children: [
                      Container(
                        child: Text(snapshot.data.toString(), style: TextStyle(fontSize: 19)),
                        margin: EdgeInsets.fromLTRB(20, 0, 20, 0),
                      ),
                      Builder(builder: (context) {
                        List<Widget> widgets = [];
                        for (int i = 0; i < conversation.length; i++) {
                          if (i % 2 == 0) {
                            var c = Container(
                              color: Colors.white,
                              child: Text(conversation[i], style: TextStyle(fontSize: 19)),
                              padding: EdgeInsets.fromLTRB(120, 20, 120, 20),
                            );
                            widgets.add(c);
                          } else {
                            var c = Container(
                              color: const Color.fromARGB(255, 208, 208, 208),
                              child: Text(conversation[i], style: TextStyle(fontSize: 19)),
                              padding: EdgeInsets.fromLTRB(20, 20, 20, 20),
                            );
                            widgets.add(c);
                          }
                        }
                        return new Column(children: widgets);
                      }),
                      !isExpanded
                          ? AskAnyQuestionsWidget(function: () {
                              setState(() {
                                isExpanded = true;
                              });
                            })
                          : Container(
                              alignment: Alignment.centerLeft,
                              margin: EdgeInsets.fromLTRB(15, 35, 0, 0),
                              child: Container(
                                margin: EdgeInsets.fromLTRB(10, 0, 25, 0),
                                height: 60,
                                width: 900,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(50.0),
                                  color: Colors.white,
                                ),
                                child: Stack(
                                  children: [
                                    IconButton(
                                      icon: Image.asset("assets/images/SubmitButton.png"),
                                      onPressed: () async {
                                        setState(() => conversation.add(currentPrompt));
                                        msgController.clear();

                                        var temp = currentPrompt;

                                        var ret = await questionToCurrentStock(temp);
                                        setState(() => conversation.add(ret));
                                        setState(() => currentPrompt = "");
                                      },
                                      padding: EdgeInsets.only(left: 320.0, top: 15),
                                      alignment: Alignment.centerRight,
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.symmetric(horizontal: 40.0),
                                      child: TextFormField(
                                        controller: msgController,
                                        textAlignVertical: TextAlignVertical.center,
                                        onChanged: (value) async {
                                          setState(() {
                                            currentPrompt = value;
                                          });
                                        },
                                        decoration: InputDecoration(
                                          contentPadding: EdgeInsets.only(bottom: 10),
                                          enabledBorder: UnderlineInputBorder(
                                            borderSide: BorderSide(color: Colors.transparent),
                                          ),
                                          focusedBorder: UnderlineInputBorder(
                                            borderSide: BorderSide(color: Colors.transparent),
                                          ),
                                          hintText: 'Ask me anything about ${currentStock}',
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                    ],
                  );
                } else {
                  return CircularProgressIndicator();
                }
              },
            ),
          ],
        ),
      ),
      color: Color.fromARGB(255, 250, 250, 250),
      height: 400 + conversation.length * 200,
    );
  }
}

class AskAnyQuestionsWidget extends StatelessWidget {
  final Function function;
  const AskAnyQuestionsWidget({
    super.key,
    required this.function,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.centerLeft,
      margin: EdgeInsets.fromLTRB(15, 35, 0, 0),
      child: Stack(
        children: [
          Container(
            child: Container(
              child: Text("Any Questions?", style: TextStyle(fontSize: 19)),
              margin: EdgeInsets.fromLTRB(70, 15, 0, 0),
            ),
            margin: EdgeInsets.fromLTRB(20, 10, 0, 0),
            width: 300,
            height: 60,
            decoration: BoxDecoration(
              color: const Color.fromARGB(255, 231, 231, 237),
              borderRadius: BorderRadius.all(Radius.circular(30)),
            ),
          ),
          IconButton(
            onPressed: () {
              function();
            },
            icon: Image.asset("assets/images/QuestionIcon.png"),
            iconSize: 60,
          ),
        ],
      ),
    );
  }
}
